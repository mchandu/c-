#include <iostream>

using namespace std;

class employee {
    public:
     int id;
     string name;
     float salary;
     void insert(int i,string n,float s)
     {
         id = i;
         name = n;
         salary = s;
     }

void display()
{
     cout << id <<""<<name<<""<<endl;
}
};

int main(void)
{
    employee e1;
    employee e2;
    e1.insert(201,"nik",990000);
    e2.insert(202,"chandu",120000);
    e1.display();
    e2.display();
    return 0;
}
output:
201nik
202chandu
******************************************************************
#include<iostream.h>
#include<conio.h>
#include<string.h>
//VAIABLES ARE PRIVATE AND FUNCTIONS ARE PUBLIC
class Employee
{
  private:
  int id;
  char name[12];
  float salary;

  public:
  void insert(int i , char n[], float s)
  {
    id = i;
    strcpy(name,n);
    salary = s;
  }
  public:
  void display()
  {
   cout <<id<<" "<<name<<" "<<salary<<endl;
  }
 };
 int main()
 {
  clrscr();
  Employee e1;
  e1.insert(12,"chandu",5373.99);
  e1.display();
  getch();
  return 0;
 }
 **************************************************************************
 #include<iostream.h>
#include<conio.h>
#include<string.h>

class Employee
{
  public:
  int id;
  char name[12];
  float salary;
  float tax;

  Employee()
  {
   cout<<"Non-parameterized consturctor"<<endl;
   id = 1001;
   strcpy(name, "chandu");
   salary = 73663.736563;
  }

  Employee(int i , char j[], float k)
  {
   cout<<"Parameterized constructor"<<endl;
   id = i;
   strcpy(name,j);
   salary = k;
  }
  //User-defined Function
  caltax()
  {
    tax = salary*0.2;
    cout<<"Tax Amount: "<<tax<<endl;
  }
  //User-defined Function
  netsalary()
  {
   cout << "Net Salary:"<<salary-tax<<endl;
  }
  //USER-DEFINED FUNCTION
  display()
  {
   cout<<"ID:"<<id<<" NAME:"<<name<<" SALARY:"<<salary<<endl;
  }
};
int main()
{
 clrscr();
 Employee e1;
 Employee e2 = Employee(12,"chandu",635.73) ;
 //clrscr();
 e1.display();
 e2.display();
 e1.caltax();
 e1.netsalary();
 e2.caltax();
 e2.netsalary();
 getch();
 return 0;
}
*********************************************************************************************
PROGRAM ON INHERITENCE

#include<iostream.h>
#include<conio.h>
#include<string.h>

class Shape   // BASE CLASS
{
    public:
    int width;
    int height;
  void setWidth(int w)
  {
   width = w;
  }
  void setHeight(int h)
  {
   height = h;
  }
};
//
class Rectangle : public Shape
{
   public:
   int getArea()
   {
    return (width * height);
   }
};
int main()
{
 clrscr();
 Rectangle rect;
 rect.setWidth(5);
 rect.setHeight(7);
 cout<< "Total Area: "<<rect.getArea() << endl;
 getch();
 return 0;
}
****************************************************************************************************
mulitple inheritance
#include <iostream>
using namespace std;

class stud {
protected:
    int roll, m1, m2;

public:
    void get()
    {
        cout << "Enter the Roll No.: "; cin >> roll;
        cout << "Enter the two highest marks: "; cin >> m1 >> m2;
    }
};
class extracurriculam {
protected:
    int xm;

public:
    void getsm()
    {
        cout << "\nEnter the mark for Extra Curriculam Activities: "; cin >> xm;
    }
};
class output : public stud, public extracurriculam {
    int tot, avg;

public:
    void display()
    {
        tot = (m1 + m2 + xm);
        avg = tot / 3;
        cout << "\n\n\tRoll No    : " << roll << "\n\tTotal      : " << tot;
        cout << "\n\tAverage    : " << avg;
    }
};
int main()
{
    output O;
    O.get();
    O.getsm();
    O.display();
}
output:
Enter the Roll No.: 10
Enter the two highest marks:45 58 
Enter the mark for Extra Curriculam Activities: 57

	Roll No    : 10
	Total      : 160
	Average    : 53
*****************************************************************************************************
multilevel inheritance
#include <iostream>
using namespace std;

class base {
public:
    void display1()
    {
        cout << "\nBase class content.";
    }
};
class derived : public base {
public:
    void display2()
    {
        cout << "\n1st derived class content.";
    }
};

class derived2 : public derived {
public:
    void display3()
    {
        cout << "\n2nd Derived class content.";
    }
};

int main()
{
    derived2 D;
    //D.display3();
    D.display2();
    D.display1();
}
output:
2nd Derived class content.
1st derived class content.
Base class content.
*******************************************************************************************************
